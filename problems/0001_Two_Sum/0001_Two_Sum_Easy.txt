  Given an array of integers, return indices of the two numbers such that they add up to a specific target.
  You may assume that each input would have exactly one solution, and you may not use the same element twice.

  Example:
	Given nums = [2, 7, 11, 15], target = 9,
	Because nums[0] + nums[1] = 2 + 7 = 9,
	return [0, 1].

	题意理解：给出一个数组以及一个target值，我们需要在数组中找出任意两个不同下标的元素，其和等于给定的target，
		成功找到就返回这两个元素的下标.

	我的解答：
	
		class Solution {
			public int[] twoSum(int[] nums, int target) {
				int [] a = new int [2];
					for(int i = 0;i < nums.length - 1;i ++){
						for(int j = i +1; j < nums.length; j ++){
							a[0] = i;
							if(nums[i] + nums[j] == target){
								a[1] = j;
								return a;                
							}
						}
					}
				return null;
			}
		}
		
	分析：
		时间复杂度:
					第一次: n-1
					第二次: n-2
					第三次: n-3
					第四次: n-4
					第五次: n-5
					第六次: n-6
					...
					第N 次：n-n 
					
					（n-1）n/2 = O(n^2)
					
	
	正解：
	
		先遍历数组，将数组中元素放入map
		再遍历map
		
		class Solution {
			public int[] twoSum(int[] nums, int target) {
				int [] a = new int [2];
				 Map<Integer,Integer> map = new HashMap<Integer,Integer>();
					for(int i = 0;i < nums.length;i ++){
						map.put(nums[i],i);
					}
					for(int i = 0;i < nums.length;i ++){
						a[0] = i;
						if(map.containsKey(target - nums[i])){
							a[1] = map.get(target - nums[i]);
							return a;
						} 						
					}	        	
					return null;
			}
		}
		
		时间复杂度：
					O(n)

											---2019.2.25  lvshuidian
		
		