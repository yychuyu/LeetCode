/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */

bool  matched(const char *str, const char *pattern)
{
    int strLen = strlen(str);
    char prec = '\0';
    bool match = true;
    for(int i=0; i<strLen; ++i)
    {
        if((str[i]!=prec&&pattern[i]=='0') || (str[i]==prec&&pattern[i]=='1') )
        {
            match = false;
            break;
        }
        prec = str[i];
    }
    return match;
}
char** findAndReplacePattern(char** words, int wordsSize, char* pattern, int* returnSize) {
    
    int len = strlen(pattern);
    char *pat = malloc(len+1);
    int j = 0;
    pat[j++] = '1';
    for(int i=1; i<len; ++i)
    {
        pat[j++]= (pattern[i]==pattern[i-1]? '0':'1');
    }
    pat[j] = '\0';
    
    char **ss = malloc(sizeof(char*)*(wordsSize+1));
    int  matchedword_cnt = 0;
    int  index_ss = 0;
    for(int i=0; i<wordsSize; ++i)
    {
        if(matched(words[i], pat))
        {
            ++matchedword_cnt;
            ss[index_ss++] = strdup(words[i]);
        }
    }
    ss[index_ss] = NULL;
    *returnSize = matchedword_cnt;
    return ss;
}